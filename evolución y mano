# -*- coding: utf-8 -*-
"""
Created on Thu Oct 26 23:28:19 2023

@author: SPARTAN PC
"""

from itertools import combinations
import numpy as np

def mazo_matriz():
    valores = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
    palos = ['C', 'D', 'H', 'S']
    
    # Crear una matriz de NumPy con 4 filas (una por cada palo) y 13 columnas (una por cada valor)
    mazo_matriz = np.empty((4, 13), dtype=[('carta', 'U2'), ('valor', int)])
    
    # Llenar la matriz con las cartas, valores y 0 como valor inicial
    for i, palo in enumerate(palos):
        for j, valor in enumerate(valores):
            mazo_matriz[i, j] = (valor + palo, 0)
    
    return mazo_matriz

def encontrar_cartas(mazo, valor):
    # Utiliza la función np.argwhere para encontrar las posiciones de los elementos con valor 1
    posiciones = np.argwhere(mazo['valor'] == valor)
   # Filtra las posiciones para asegurarte de que estén dentro de los límites válidos
    posiciones_filtradas = [pos for pos in posiciones if 0 <= pos[0] < mazo.shape[0] and 0 <= pos[1] < mazo.shape[1]]
    
    return posiciones_filtradas

def mano(mazo):
    # Encuentra las posiciones de las cartas con el valor especificado
    posiciones = np.argwhere(mazo['valor'] == 1)
    
    # Utiliza las posiciones para obtener las cartas correspondientes
    cartas_encontradas = mazo['carta'][posiciones[:, 0], posiciones[:, 1]]
    
    return cartas_encontradas, posiciones

def carta_alta(mazo):
    # Llama a la función mano_optimizada para obtener las cartas con valor 1
    cartas, posiciones = mano(mazo)
    
    if len(cartas) == 0:
        return "No hay cartas con valor 1 en la mano."
    
    # Encuentra la posición de la carta con el índice de columna más alto
    indice_max_columna = np.argmax(posiciones[:, 1])
    
    # Obtiene la carta correspondiente
    carta_alta = cartas[indice_max_columna]
    
    return carta_alta

def mesa(mazo):
    # Encuentra las posiciones de las cartas con el valor especificado
    posiciones = np.argwhere(mazo['valor'] == 2)
    
    # Utiliza las posiciones para obtener las cartas correspondientes
    cartas_encontradas = mazo['carta'][posiciones[:, 0], posiciones[:, 1]]
    
    return cartas_encontradas, posiciones

def asignar_valor(cartas, valor, mazo):
    # Asegúrate de que cartas sea una lista (si es una sola carta, conviértela en una lista)
    if isinstance(cartas, str):
        cartas = [cartas]
    
    for carta in cartas:
        # Iterar sobre las filas y columnas del mazo
        for i in range(mazo.shape[0]):
            for j in range(mazo.shape[1]):
                if mazo['carta'][i, j] == carta:
                    mazo['valor'][i, j] = valor

def cartas_fila_columna(mazo):
    filas = mazo.shape[0]
    columnas = mazo.shape[1]
    
    cantidades_filas = np.zeros(filas, dtype=int)
    cantidades_columnas = np.zeros(columnas, dtype=int)

    for i in range(filas):
        fila = mazo[i]  # Seleccionar la fila
        
        # Contar cartas con valor diferente de 0 en la fila
        cantidad_fila = np.sum(fila['valor'] != 0)
        cantidades_filas[i] = cantidad_fila

    for j in range(columnas):
        columna = mazo[:, j]  # Seleccionar la columna
        
        # Contar cartas con valor diferente de 0 en la columna
        cantidad_columna = np.sum(columna['valor'] != 0)
        cantidades_columnas[j] = cantidad_columna
    
    return cantidades_filas, cantidades_columnas

def determinar_combinacion_cartas(mazo):
    # Mapear índices a valores de cartas y palos
    valores_cartas = {
        0: '2',
        1: '3',
        2: '4',
        3: '5',
        4: '6',
        5: '7',
        6: '8',
        7: '9',
        8: 'T',
        9: 'J',
        10: 'Q',
        11: 'K',
        12: 'A'
    }
    palos_cartas = {
        0: 'C',
        1: 'D',
        2: 'H',
        3: 'S'
    }

    # Contar cartas diferentes de cero en columnas
    cantidades_columnas = np.sum(mazo['valor'] != 0, axis=0)

    # Contar cartas del mismo palo en cada fila
    cantidades_palos_fila = np.sum(mazo['valor'] != 0, axis=1)
    
    calif_mano=0
    # Inicializar variables para las combinaciones
    par_cartas = []
    trio_cartas = []
    dos_pares_cartas = []
    poker_cartas = []
    full_house_indices = []
    escalera = False
    ultima_carta_escalera = None
    color = False    
    escalera_color=False
    combinaciones_encontradas = []
    #valor es un numero que se le asigna a la mano resultante
    valor=0

    # Evaluar combinaciones y rastrear cartas
    for columna, cantidad in enumerate(cantidades_columnas):
        if cantidad == 2:
            par_cartas.append(valores_cartas[columna])
            calif_mano=2+(columna*.1)
            valor=1+(0.01*columna)
        elif cantidad == 3:
            trio_cartas.append(valores_cartas[columna])
            calif_mano=3+(columna*.1)
            valor=3+(0.01*columna)
        elif cantidad == 4:
            poker_cartas.append(valores_cartas[columna])
            valor=7+(0.01*columna)

          # Detectar escaleras (incluyendo A-2-3-4-5)
    if all(cantidades_columnas[i] > 0 for i in [0, 1, 2, 3, 12]):
        escalera = True
        # Encontrar el índice de la última carta de la escalera
        ultima_carta_escalera_indice = columna
        ultima_carta_escalera = 5
        valor=4+(0.01*5)
    else:
        consecutivas = 0
        for columna, cantidad in enumerate(cantidades_columnas):
            if cantidad >= 1:
                consecutivas += 1
                if consecutivas >= 5:
                    indices_cartas_consecutivas = set()
                    for i in range(columna, columna - 5, -1):
                        carta = valores_cartas[i]
                        if carta in '23456789TJQKA':
                            indices_cartas_consecutivas.add(carta)                   
                    if len(indices_cartas_consecutivas) >= 5:
                        escalera = True
                        # Encontrar el índice de la última carta de la escalera
                        ultima_carta_escalera_indice = columna
                        ultima_carta_escalera = valores_cartas[ultima_carta_escalera_indice]
                        valor=4+(0.01*columna)+0.02
            else:
                consecutivas = 0
    # Detectar colores (flush)
    # Detectar Color (al menos 5 cartas del mismo palo en una fila)
    for fila, cantidad in enumerate(cantidades_palos_fila):
        if cantidad >= 5:
            color = True
            palo = palos_cartas[fila]
            indices_cartas_consecutivas = set()
            if (mazo[fila][0]['valor']>0 and mazo[fila][1]['valor']>0 and 
                mazo[fila][2]['valor']>0 and mazo[fila][3]['valor']>0 and 
                mazo[fila][12]['valor']>0):
                escalera_color = True
                escalera= False
                color= False
                valor=8+(0.01*5)                
            else:
                for columna, valor in enumerate(mazo[fila]):
                    if valor['valor'] > 0:
                        carta = valores_cartas[columna]
                        if carta in '23456789TJQKA':
                            indices_cartas_consecutivas.add(carta)
                
                if len(indices_cartas_consecutivas) >= 5:
                    palo_indices = [columna for columna, valor in enumerate(mazo[fila]) if valor['valor'] > 0 and carta in '23456789TJQKA']
                    palo_indices = sorted(palo_indices)
                    if max(palo_indices) - min(palo_indices) >= 4:
                       if color and escalera:
                            escalera= False 
                            escalera_color = True
                            color = False    # Evaluar combinaciones y rastrear cartas (Agrega combinaciones encontradas a la lista)
                            valor=8
    if poker_cartas:
        combinaciones_encontradas.append(f"Poker con cartas: {', '.join(poker_cartas)}")
    elif trio_cartas and par_cartas:
        combinaciones_encontradas.append(f"Full House con trío en cartas: {', '.join(trio_cartas)} y par en cartas: {', '.join(par_cartas)}")
        valor=6    
    elif trio_cartas:
        combinaciones_encontradas.append(f"Trío con cartas: {', '.join(trio_cartas)}")
    elif len(par_cartas) == 2:
        combinaciones_encontradas.append(f"Dos Pares con cartas: {', '.join(par_cartas)}")
        valor=2
    elif par_cartas:
        combinaciones_encontradas.append(f"Par con cartas: {', '.join(par_cartas)}")
    elif color:
        combinaciones_encontradas.append(f'Color: {palo}')
        valor=5
    elif escalera:
        combinaciones_encontradas.append(f'Escalera al: {ultima_carta_escalera}')
    elif escalera_color:
        combinaciones_encontradas.append(f'Escalera de color: {palo} al {ultima_carta_escalera}')
    else:
        # Si no se formó ninguna mano, determina la carta alta
        carta_alta_encontrada = carta_alta(mazo)
        combinaciones_encontradas.append(f"Carta alta: {carta_alta_encontrada}")

    # Convierte la lista de combinaciones en una cadena de texto
    resultado = '\n'.join(combinaciones_encontradas)

    # Retorna la cadena de texto con las combinaciones
    return resultado,valor
             
def combinaciones(mazo):
    # Encuentra las posiciones de las cartas con valor 0
    posiciones_valor_cero = encontrar_cartas(mazo, 0)
    
    # "n" es igual al número de cartas con valor 0
    n = len(posiciones_valor_cero)
    
    # Si hay menos de 2 cartas con valor 0, no se pueden formar combinaciones
    if n < 2:
        return 0

    # Genera todas las combinaciones posibles de "n en 2" cartas y cuenta el número de combinaciones
    numero_combinaciones = len(list(combinations(posiciones_valor_cero, 2)))
    
    return numero_combinaciones, calif_mano
 
